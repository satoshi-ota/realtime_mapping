#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import rospy
import numpy as np
import traceback
import math
import tf
import time
from ros_uav_estimate.msg import ros_uav
from nav_msgs.msg import Odometry
from std_msgs.msg import Float32
from std_msgs.msg import Header
from datetime import datetime, timedelta

class EstimateOdom():
    def __init__(self):
        rospy.Subscriber('rtkrcv_ant', ros_uav, self.get_antpos)
        self.pub_odom = rospy.Publisher('uav_odom', Odometry, queue_size=1)
        self.pub_header = rospy.Publisher('gps_time', Header, queue_size=1)
        self.pub_roll = rospy.Publisher('roll', Float32, queue_size=1)
        self.pub_pitch = rospy.Publisher('pitch', Float32, queue_size=1)
        self.pub_yaw = rospy.Publisher('yaw', Float32, queue_size=1)
        self.pub_height = rospy.Publisher('height', Float32, queue_size=1)
        self.antpos_time = rospy.Time(0)
        self.uav_ant_1 = np.zeros(5)
        self.uav_ant_2 = np.zeros(5)
        self.uav_ant_3 = np.zeros(5)
        self.uav_ant_4 = np.zeros(5)
        self.uav_ant_5 = np.zeros(5)
        self.uav_ant_6 = np.zeros(5)
        self.antpos = np.zeros((5, 6))
        self.previous_uavatt_rpy = np.zeros(3)
        self.uavatt_rpy = np.zeros(3)
        self.uavatt_q = np.zeros(4)
        self.multiuavpos_previous = np.zeros((3, 6))
        self.uavpos = np.zeros(3)
        self.uavpos_previous = np.zeros(3)

        #reference antenna position
        ant_1 = [0.0040,0.9009,0.0082]
        ant_2 = [0.7936,0.4584,-0.0112]
        ant_3 = [0.7631,-0.4548,0.0057]
        ant_4 = [0.0040,-0.8856,0.0032]
        ant_5 = [-0.7790,-0.4518,-0.0065]
        ant_6 = [-0.7857,0.4330,0.0007]
        self.AntInBody = np.array([ant_1, ant_2, ant_3, ant_4, ant_5, ant_6])
        self.v = np.zeros((6, 6, 3))
        self.d = np.zeros((6, 6))
        for i in range(0, 6):
            for j in range(0, 6):
                self.v[i, j ,:] = self.AntInBody[j, :] - self.AntInBody[i, :]
                self.d[i, j] = np.linalg.norm(self.AntInBody[j, :]\
                    - self.AntInBody[i, :])

    def get_antpos(self, data):
        #self.antpos_time = data.header.stamp
        self.uav_ant_1 = np.array([data.ant1.gps_sec, data.ant1.e, data.ant1.n,\
            data.ant1.u, data.ant1.stat])
        self.uav_ant_2 = np.array([data.ant2.gps_sec, data.ant2.e, data.ant2.n,\
            data.ant2.u, data.ant2.stat])
        self.uav_ant_3 = np.array([data.ant3.gps_sec, data.ant3.e, data.ant3.n,\
            data.ant3.u, data.ant3.stat])
        self.uav_ant_4 = np.array([data.ant4.gps_sec, data.ant4.e, data.ant4.n,\
            data.ant4.u, data.ant4.stat])
        self.uav_ant_5 = np.array([data.ant5.gps_sec, data.ant5.e, data.ant5.n,\
            data.ant5.u, data.ant5.stat])
        self.uav_ant_6 = np.array([data.ant6.gps_sec, data.ant6.e, data.ant6.n,\
            data.ant6.u, data.ant6.stat])

        if self.uav_ant_1[4] + self.uav_ant_2[4] + self.uav_ant_3[4] + self.uav_ant_4[4] + self.uav_ant_5[4] + self.uav_ant_6[4] != 0:
            self.GPSfromUTC = (datetime(1980, 1, 6) - datetime(1970, 1, 1)).total_seconds()
            self.uav_gps_time = (data.ant1.gps_sec + data.ant2.gps_sec + data.ant3.gps_sec + data.ant4.gps_sec + data.ant5.gps_sec + data.ant6.gps_sec)/6 + data.ant1.gps_w*7*3600*24 + self.GPSfromUTC + 19 - 37
            self.antpos_time = rospy.Time.from_sec(self.uav_gps_time)

    def mainloop(self):
        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            try:
                while not rospy.is_shutdown():
                    self.estimate_att()
                    self.estimate_pos()
                    self.send_tf()
                    rate.sleep()

            except rospy.ROSInterruptException:
                continue

            except:
                traceback.print_exc()
                time.sleep(5.0)
                continue

    def estimate_att(self):
        baseline_th = 0.05
        fixnum = 0
        tmp = np.zeros(3)
        w = np.zeros((6, 6, 3))
        self.antpos = np.array([self.uav_ant_1, self.uav_ant_2, self.uav_ant_3,\
            self.uav_ant_4, self.uav_ant_5, self.uav_ant_6])

        #create observation vectors
        for i in range(0, 6):
            for j in range(0, 6):
                fix_1 = self.antpos[i, 4]
                fix_2 = self.antpos[j, 4]
                tmp = self.antpos[j, 1:4] - self.antpos[i, 1:4]
                dtmp = np.linalg.norm(tmp)
                if fix_1==1 and fix_2==1 and i!=j \
                    and abs(self.d[i, j]-dtmp)<baseline_th:
                    w[i, j ,:] = tmp
                else:
                    w[i, j ,:] = [0, 0, 0]
                if i!=j and all(w[i, j, :]):
                    fixnum += 1

        if self.uav_ant_1[4] + self.uav_ant_2[4] + self.uav_ant_3[4] + self.uav_ant_4[4] + self.uav_ant_5[4] + self.uav_ant_6[4] == 0:
            self.uavatt_q = np.array([0, 0, 0, 0])

        if fixnum>=3:
            q = self.qmethod(w)
            q_real = q.real
            self.uavatt_q = self.Value2Quat(np.append(q_real[3], q_real[0:3]))
            self.uavatt_rpy = np.array([self.roll(self.uavatt_q),\
                self.pitch(self.uavatt_q), self.yaw(self.uavatt_q)])*180/np.pi
            if self.uavatt_rpy[0]<=0:
                self.uavatt_rpy[0] = self.uavatt_rpy[0]+180
            else:
                self.uavatt_rpy[0] = self.uavatt_rpy[0]-180
        else:
            self.uavatt_rpy = self.previous_uavatt_rpy
        self.previous_uavatt_rpy = self.uavatt_rpy

    def estimate_pos(self):
        pos_sd_th = 0.1
        antpos = np.zeros((3, 6))
        multiuavpos = np.zeros((3, 6))

        #transform antenna position to UAV position
        for i in range(0, 6):
            if self.antpos[i, 4] == 1:
                antpos[:, i] = self.antpos[i, 1:4]
                b = np.c_[self.AntInBody[i, :]]
                X = self.TF_Body2BodyCenterENU(b)
                multiuavpos[:, i] = antpos[:, i]-X
            else:
                multiuavpos[:, i] = np.array([0, 0, 0])
        if np.count_nonzero(antpos) == 0:
            multiuavpos = self.multiuavpos_previous
        self.multiuavpos_previous = multiuavpos

        tmp = multiuavpos[:, multiuavpos[0, :]!=0]
        sdtmp = np.std(tmp, axis=1, ddof=1)
        count = multiuavpos[0, :]!=0

        #average of UAV position
        if np.linalg.norm(sdtmp)<pos_sd_th and np.count_nonzero(count)!=0:
            self.uavpos= np.mean(tmp, axis=1)
        else:
            self.uavpos = self.uavpos_previous
        self.uavpos_previous = self.uavpos

    def qmethod(self, w):
        wa = np.zeros((3, 36))
        va = np.zeros((3, 36))
        P = np.zeros(36)
        use_ind = np.zeros(36)
        k = 0
        for i in range(0, 6):
            for j in range(0, 6):
                wa[:, k] = w[i, j, :]
                va[:, k] = self.v[i, j, :]
                P[k] = self.d[i, j]
                if all(wa[:, k])==True:
                    use_ind[k] = 1
                else:
                    use_ind[k] = 0
                k += 1
        P = P.T

        B = np.zeros((3, 3))
        sig = 0
        z = np.zeros(3)
        a = P/sum(P*use_ind)
        a = a*use_ind
        wa_2 = np.zeros(3)
        va_2 = np.zeros(3)
        for i in range(0, len(wa[1, :])):
            wa_2 = wa[:, i]
            va_2 = va[:, i]
            B += a[i]*np.tensordot(wa_2, va_2, axes=0)
            sig += a[i]*np.dot(wa_2, va_2)
            z += a[i]*np.cross(wa_2, va_2)

        S = B+B.T
        A_11 = S-sig*np.eye(3)
        A_12 = np.c_[z]
        A_21 = z
        A_22 = sig

        A_1 = np.hstack([A_11, A_12])
        A_2 = np.hstack([A_21, A_22])
        K = np.append(A_1, np.array([A_2]), axis=0)

        eig, V = np.linalg.eig(K)
        d = np.sort(eig)
        ind = np.argsort(eig)
        V = V[:, ind]/np.tile(np.sqrt(np.sum(np.power(V, 2), axis=1)) , (4, 1))
        q_ = V[:, 3]
        q = np.array([-q_[0], -q_[1], -q_[2], q_[3]])

        return q

    def Value2Quat(self, values):
        values = values/np.linalg.norm(values)
        return values

    def roll(self, q):
        [w, x, y, z] = self.sep(q)
        deg = np.arctan2(2*y*z+2*w*x, -w*w+x*x+y*y-z*z)
        return deg

    def pitch(self, q):
        [w, x, y, z] = self.sep(q)
        deg = np.arcsin(2*w*y-2*x*z)
        return deg

    def yaw(self, q):
        [w, x, y, z] = self.sep(q)
        deg = np.arctan2(2*x*y+2*w*z, w*w+x*x-y*y-z*z)
        return deg

    def sep(self, q):
        x = q[1]
        y = q[2]
        z = q[3]
        w = q[0]
        return [w, x, y, z]

    def TF_Body2BodyCenterENU(self, b):
        T = np.array([0, 0, 0])
        T = np.c_[T]
        q = np.append(self.uavatt_q[0], -self.uavatt_q[1:4])
        P = np.append(self.R(q).T, -np.dot(self.R(q).T, T), axis=1)
        P = np.append(P, np.array([[0, 0, 0, 1]]), axis=0)
        X = np.append(b, self.sizefit(np.array([1]), b, 2), axis=0)
        X = np.dot(P, np.c_[X])
        X = X[0:3, :]
        X =X.T
        return X

    def R(self, q):
        [w, x, y, z] = self.sep(q)
        Rmat = np.array(([self.ii(w, x, y, z), self.ij(x, y, z, -w),\
            self.ij(z, x, y, w)], [self.ij(x, y, z, w), self.ii(w, y, z, x),\
            self.ij(y, z, x, -w)], [self.ij(z, x, y, -w), self.ij(y, z, x, w),\
            self.ii(w, z, x, y)]))
        return Rmat

    def ii(self, a, b, c, d):
        out = a**2+b**2-c**2-d**2
        return out

    def ij(self, a, b, c, d):
        out = 2*(a*b+c*d)
        return out

    def sizefit(self, A, B, dim):
        sa = np.array([len(A), len(np.c_[A])])
        sb = np.array(B.shape)
        sf = np.ones(sa.shape)
        sf[dim-1] = sb[dim-1]
        fitA = np.tile(A, sf)
        return fitA

    def send_tf(self):
        gps_time = Header()
        gps_time.stamp = self.antpos_time
        self.pub_header.publish(gps_time)

        self.pub_roll.publish(self.uavatt_rpy[0])
        self.pub_pitch.publish(self.uavatt_rpy[1])
        self.pub_yaw.publish(self.uavatt_rpy[2])
        self.pub_height.publish(self.uavpos[2])

        uav_odom_br = tf.TransformBroadcaster()
        uav_odom_br.sendTransform((self.uavpos[0], self.uavpos[1],\
            self.uavpos[2]), np.append(self.uavatt_q[1:4], self.uavatt_q[0]),\
            self.antpos_time, 'uav', 'map')
        uav_odom_br.sendTransform((0, 0, 0),\
            tf.transformations.quaternion_from_euler(0, 0,\
            math.radians(-89.5983)), self.antpos_time, 'uav_body_1', 'uav')
        uav_odom_br.sendTransform((0, 0, 0),\
            tf.transformations.quaternion_from_euler(0, math.radians(-89.6548),\
            0), self.antpos_time, 'uav_body_2', 'uav_body_1')
        uav_odom_br.sendTransform((0, 0, 0),\
            tf.transformations.quaternion_from_euler(0, 0,\
            math.radians(87.8765)), self.antpos_time, 'velodyne', 'uav_body_2')

if __name__ == '__main__':
    rospy.init_node('tf_publisher_node')
    node = EstimateOdom()
    node.mainloop()
